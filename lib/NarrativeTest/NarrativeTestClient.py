# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class NarrativeTest(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def test_async_job(self, params, context=None):
        """
        Asynchronously copies a genome into another genome. Ta-daaa!
        :param params: instance of type "TestAsyncJobParams" -> structure:
           parameter "workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "input_genome_name" of
           type "genome_name", parameter "output_genome_name" of type
           "genome_name"
        :returns: instance of type "TestAsyncJobResults" (The workspace ID
           for a ContigSet data object. @id ws KBaseGenomes.ContigSet) ->
           structure: parameter "report_name" of String, parameter
           "report_ref" of String, parameter "new_genome_ref" of type
           "ws_contigset_id"
        """
        return self._client.call_method(
            'NarrativeTest.test_async_job',
            [params], self._service_ver, context)

    def test_editor(self, editor, workspace, context=None):
        """
        :param editor: instance of String
        :param workspace: instance of type "workspace_name" (A string
           representing a workspace name.)
        :returns: instance of type "TestEditorResults" -> structure:
           parameter "report_name" of String, parameter "report_ref" of
           String, parameter "output" of String
        """
        return self._client.call_method(
            'NarrativeTest.test_editor',
            [editor, workspace], self._service_ver, context)

    def save_reads_set_v1(self, inputs, context=None):
        """
        :param inputs: instance of unspecified object
        :returns: instance of unspecified object
        """
        return self._client.call_method(
            'NarrativeTest.save_reads_set_v1',
            [inputs], self._service_ver, context)

    def test_param_groups(self, params, context=None):
        """
        :param params: instance of type "TestParamGroupsParams" -> structure:
           parameter "workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "param_group" of list
           of type "SimpleParamGroup" -> structure: parameter "genome_ref" of
           String, parameter "free_text" of list of String, parameter "check"
           of Long
        :returns: instance of type "ReportOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'NarrativeTest.test_param_groups',
            [params], self._service_ver, context)

    def test_input_mapping(self, params, context=None):
        """
        :param params: instance of type "SimpleTestObject" -> structure:
           parameter "workspace" of type "workspace_id" (A string
           representing a workspace id.), parameter "file_path" of String
        :returns: instance of unspecified object
        """
        return self._client.call_method(
            'NarrativeTest.test_input_mapping',
            [params], self._service_ver, context)

    def generic_test(self, params, context=None):
        """
        :param params: instance of unspecified object
        :returns: instance of unspecified object
        """
        return self._client.call_method(
            'NarrativeTest.generic_test',
            [params], self._service_ver, context)

    def import_reads_from_staging(self, params, context=None):
        """
        :param params: instance of type "UploadReadsParams" -> structure:
           parameter "import_type" of String, parameter
           "fastq_fwd_staging_file_name" of String, parameter
           "fastq_rev_staging_file_name" of String, parameter
           "sra_staging_file_name" of String, parameter "sequencing_tech" of
           type "sequencing_tech" (sequencing_tech: sequencing technology
           name: output reads file name workspace_name: workspace name/ID of
           the object import_type: either FASTQ or SRA For files in user's
           staging area: fastq_fwd_or_sra_staging_file_name: single-end fastq
           file name Or forward/left paired-end fastq file name from user's
           staging area Or SRA staging file fastq_rev_staging_file_name:
           reverse/right paired-end fastq file name user's staging area e.g.
           for file: /data/bulk/user_name/file_name staging_file_subdir_path
           is file_name for file:
           /data/bulk/user_name/subdir_1/subdir_2/file_name
           staging_file_subdir_path is subdir_1/subdir_2/file_name Optional
           Params: single_genome: whether the reads are from a single genome
           or a metagenome. interleaved: whether reads is interleaved
           insert_size_mean: mean (average) insert length
           insert_size_std_dev: standard deviation of insert lengths
           read_orientation_outward: whether reads in a pair point outward),
           parameter "workspace_name" of type "workspace_name" (A string
           representing a workspace name.), parameter "name" of String,
           parameter "single_genome" of type "single_genome", parameter
           "interleaved" of type "interleaved", parameter "insert_size_mean"
           of type "insert_size_mean", parameter "insert_size_std_dev" of
           type "insert_size_std_dev", parameter "read_orientation_outward"
           of type "read_orientation_outward"
        :returns: instance of type "UploadMethodResult" -> structure:
           parameter "obj_ref" of type "obj_ref", parameter "report_name" of
           type "report_name", parameter "report_ref" of type "report_ref"
        """
        return self._client.call_method(
            'NarrativeTest.import_reads_from_staging',
            [params], self._service_ver, context)

    def example_report(self, params, context=None):
        """
        :param params: instance of type "ExampleReportParams" -> structure:
           parameter "text_input" of String, parameter "checkbox_input" of
           Long, parameter "workspace_id" of Long
        :returns: instance of type "ExampleReportResult" -> structure:
           parameter "report_name" of type "report_name", parameter
           "report_ref" of type "report_ref"
        """
        return self._client.call_method(
            'NarrativeTest.example_report',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('NarrativeTest.status',
                                        [], self._service_ver, context)
